<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>xxl-job实现自动注册</title>
      <link href="/2023/11/06/xxl-job%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C/"/>
      <url>/2023/11/06/xxl-job%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、项目背景："><a href="#一、项目背景：" class="headerlink" title="一、项目背景："></a>一、项目背景：</h2><p><code>xxl-job</code>是一款非常优秀的任务调度中间件，轻量级、使用简单、支持分布式等优点，让它广泛应用在我们的项目中，解决了不少定时任务的调度问题。</p><p>我们都知道，在使用过程中需要先到<code>xxl-job</code>的任务调度中心页面上，配置执行器<code>executor</code>和具体的任务<code>job</code>，这一过程如果项目中的定时任务数量不多还好说，如果任务多了的话还是挺费工夫的。</p><p>假设项目中有上百个这样的定时任务，那么每个任务都需要走一遍绑定<code>jobHander</code>后端接口，填写<code>cron</code>表达式这个流程…</p><p>于是出于功能优化（<strong>偷懒</strong>）这一动机，有没有什么方法能够告别<code>xxl-job</code>的管理页面，能够让我不再需要到页面上去手动注册执行器和任务，实现让它们自动注册到调度中心呢。 </p><h2 id="二、分析："><a href="#二、分析：" class="headerlink" title="二、分析："></a>二、分析：</h2><p>分析一下，其实我们要做的很简单，只要在项目启动时主动注册<code>executor</code>和各个<code>jobHandler</code>到调度中心就可以了，流程如下：</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231106134020383.png" alt="image-20231106134020383"></p><p>有的小伙伴们可能要问了，我在页面上创建<strong>执行器</strong>的时候，不是有一个选项叫做<strong>自动注册</strong>吗，为什么我们这里还要自己添加新执行器？</p><p>其实这里有个误区，这里的自动注册指的是会根据项目中配置的<code>xxl.job.executor.appname</code>，将配置的机器地址自动注册到这个执行器的地址列表中。但是如果你之前没有手动创建过执行器，那么是不会给你自动添加一个新执行器到调度中心的。</p><p>既然有了想法咱们就直接开干，先到github上拉一份xxl-job的源码下来： </p><blockquote><p><a href="https://github.com/xuxueli/xxl-job">https://github.com/xuxueli/xxl-job</a></p></blockquote><p>整个项目导入idea后，先看一下结构:</p><p>结合着文档和代码，先梳理一下各个模块都是干什么的：</p><ul><li><code>xxl-job-admin</code>：任务调度中心，启动后就可以访问管理页面，进行执行器和任务的注册、以及任务调用等功能了</li><li><code>xxl-job-core</code>：公共依赖，项目中使用到xxl-job时要引入的依赖包</li><li><code>xxl-job-executor-samples</code>：执行示例，分别包含了springboot版本和不使用框架的版本</li></ul><p>为了弄清楚注册和查询<code>executor</code>和<code>jobHandler</code>调用的是哪些接口，我们先从页面上去抓一个请求看看：</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231106134216225.png" alt="image-20231106134216225"></p><p>好了，这样就能定位到<code>xxl-job-admin</code>模块中<code>/jobgroup/save</code>这个接口，接下来可以很容易地找到源码位置：</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231106134258341.png" alt="image-20231106134258341"></p><p>按照这个思路，可以找到下面这几个关键接口：</p><ul><li><code>/jobgroup/pageList</code>：执行器列表的条件查询</li><li><code>/jobgroup/save</code>：添加执行器</li><li><code>/jobinfo/pageList</code>：任务列表的条件查询</li><li><code>/jobinfo/add</code>：添加任务</li></ul><p>但是如果直接调用这些接口，那么就会发现它会跳转到<code>xxl-job-admin</code>的的登录页面</p><p>其实想想也明白，出于安全性考虑，调度中心的接口也不可能允许裸调的。那么再回头看一下刚才页面上的请求就会发现，它在<code>Headers</code>中添加了一条名为<code>XXL_JOB_LOGIN_IDENTITY</code>的<code>cookie</code>：</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231106134412832.png" alt="image-20231106134412832"></p><p>至于这条<code>cookie</code>，则是在通过用户名和密码调用调度中心的<code>/login</code>接口时返回的，在返回的<code>response</code>可以直接拿到。只要保存下来，并在之后每次请求时携带，就能够正常访问其他接口了。</p><p>到这里，我们需要的5个接口就基本准备齐了，接下来准备开始正式的改造工作。 </p><h2 id="三、改造"><a href="#三、改造" class="headerlink" title="三、改造"></a>三、改造</h2><p>我们改造的目的是实现一个<code>starter</code>，以后只要引入这个<code>starter</code>就能实现<code>executor</code>和<code>jobHandler</code>的自动注册，要引入的关键依赖有下面两个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- xxl-job-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;xxl-job.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-接口调用"><a href="#1-接口调用" class="headerlink" title="1.接口调用"></a>1.接口调用</h4><p>在调用调度中心的接口前，先把<code>xxl-job-admin</code>模块中的<code>XxlJobInfo</code>和<code>XxlJobGroup</code>这两个类拿到我们的starter项目中，用于接收接口调用的结果。</p><h5 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h5><p>创建一个<code>JobLoginService</code>，在调用业务接口前，需要通过登录接口获取<code>cookie</code>，并在获取到<code>cookie</code>后，缓存到本地的<code>Map</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,String&gt; loginCookie=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">    String url=adminAddresses+<span class="string">&quot;/login&quot;</span>;</span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpRequest.post(url)</span><br><span class="line">            .form(<span class="string">&quot;userName&quot;</span>,username)</span><br><span class="line">            .form(<span class="string">&quot;password&quot;</span>,password)</span><br><span class="line">            .execute();</span><br><span class="line">    List&lt;HttpCookie&gt; cookies = response.getCookies();</span><br><span class="line">    Optional&lt;HttpCookie&gt; cookieOpt = cookies.stream()</span><br><span class="line">            .filter(cookie -&gt; cookie.getName().equals(<span class="string">&quot;XXL_JOB_LOGIN_IDENTITY&quot;</span>)).findFirst();</span><br><span class="line">    <span class="keyword">if</span> (!cookieOpt.isPresent())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;get xxl-job cookie error!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookieOpt.get().getValue();</span><br><span class="line">    loginCookie.put(<span class="string">&quot;XXL_JOB_LOGIN_IDENTITY&quot;</span>,value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他接口在调用时，直接从缓存中获取<code>cookie</code>，如果缓存中不存在则调用<code>/login</code>接口，为了避免这一过程失败，允许最多重试3次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getCookie</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cookieStr</span> <span class="operator">=</span> loginCookie.get(<span class="string">&quot;XXL_JOB_LOGIN_IDENTITY&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cookieStr !=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;XXL_JOB_LOGIN_IDENTITY=&quot;</span>+cookieStr;</span><br><span class="line">        &#125;</span><br><span class="line">        login();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;get xxl-job cookie error!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="执行器接口"><a href="#执行器接口" class="headerlink" title="执行器接口"></a>执行器接口</h5><p>创建一个<code>JobGroupService</code>，根据<code>appName</code>和执行器名称<code>title</code>查询执行器列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;XxlJobGroup&gt; <span class="title function_">getJobGroup</span><span class="params">()</span> &#123;</span><br><span class="line">    String url=adminAddresses+<span class="string">&quot;/jobgroup/pageList&quot;</span>;</span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpRequest.post(url)</span><br><span class="line">            .form(<span class="string">&quot;appname&quot;</span>, appName)</span><br><span class="line">            .form(<span class="string">&quot;title&quot;</span>, title)</span><br><span class="line">            .cookie(jobLoginService.getCookie())</span><br><span class="line">            .execute();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> response.body();</span><br><span class="line">    <span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> JSONUtil.parse(body).getByPath(<span class="string">&quot;data&quot;</span>, JSONArray.class);</span><br><span class="line">    List&lt;XxlJobGroup&gt; list = array.stream()</span><br><span class="line">            .map(o -&gt; JSONUtil.toBean((JSONObject) o, XxlJobGroup.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在后面要根据配置文件中的<code>appName</code>和<code>title</code>判断当前执行器是否已经被注册到调度中心过，如果已经注册过那么则跳过，而<code>/jobgroup/pageList</code>接口是一个模糊查询接口，所以在查询列表的结果列表中，还需要再进行一次精确匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preciselyCheck</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;XxlJobGroup&gt; jobGroup = getJobGroup();</span><br><span class="line">    Optional&lt;XxlJobGroup&gt; has = jobGroup.stream()</span><br><span class="line">            .filter(xxlJobGroup -&gt; xxlJobGroup.getAppname().equals(appName)</span><br><span class="line">                    &amp;&amp; xxlJobGroup.getTitle().equals(title))</span><br><span class="line">            .findAny();</span><br><span class="line">    <span class="keyword">return</span> has.isPresent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册新<code>executor</code>到调度中心：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">autoRegisterGroup</span><span class="params">()</span> &#123;</span><br><span class="line">    String url=adminAddresses+<span class="string">&quot;/jobgroup/save&quot;</span>;</span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpRequest.post(url)</span><br><span class="line">            .form(<span class="string">&quot;appname&quot;</span>, appName)</span><br><span class="line">            .form(<span class="string">&quot;title&quot;</span>, title)</span><br><span class="line">            .cookie(jobLoginService.getCookie())</span><br><span class="line">            .execute();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">code</span> <span class="operator">=</span> JSONUtil.parse(response.body()).getByPath(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> code.equals(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="任务接口"><a href="#任务接口" class="headerlink" title="任务接口"></a>任务接口</h5><p>创建一个<code>JobInfoService</code>，根据执行器<code>id</code>，<code>jobHandler</code>名称查询任务列表，和上面一样，也是模糊查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;XxlJobInfo&gt; <span class="title function_">getJobInfo</span><span class="params">(Integer jobGroupId,String executorHandler)</span> &#123;</span><br><span class="line">    String url=adminAddresses+<span class="string">&quot;/jobinfo/pageList&quot;</span>;</span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpRequest.post(url)</span><br><span class="line">            .form(<span class="string">&quot;jobGroup&quot;</span>, jobGroupId)</span><br><span class="line">            .form(<span class="string">&quot;executorHandler&quot;</span>, executorHandler)</span><br><span class="line">            .form(<span class="string">&quot;triggerStatus&quot;</span>, -<span class="number">1</span>)</span><br><span class="line">            .cookie(jobLoginService.getCookie())</span><br><span class="line">            .execute();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> response.body();</span><br><span class="line">    <span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> JSONUtil.parse(body).getByPath(<span class="string">&quot;data&quot;</span>, JSONArray.class);</span><br><span class="line">    List&lt;XxlJobInfo&gt; list = array.stream()</span><br><span class="line">            .map(o -&gt; JSONUtil.toBean((JSONObject) o, XxlJobInfo.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册一个新任务，最终返回创建的新任务的<code>id</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Integer <span class="title function_">addJobInfo</span><span class="params">(XxlJobInfo xxlJobInfo)</span> &#123;</span><br><span class="line">    String url=adminAddresses+<span class="string">&quot;/jobinfo/add&quot;</span>;</span><br><span class="line">    Map&lt;String, Object&gt; paramMap = BeanUtil.beanToMap(xxlJobInfo);</span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpRequest.post(url)</span><br><span class="line">            .form(paramMap)</span><br><span class="line">            .cookie(jobLoginService.getCookie())</span><br><span class="line">            .execute();</span><br><span class="line"></span><br><span class="line">    <span class="type">JSON</span> <span class="variable">json</span> <span class="operator">=</span> JSONUtil.parse(response.body());</span><br><span class="line">    <span class="type">Object</span> <span class="variable">code</span> <span class="operator">=</span> json.getByPath(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (code.equals(<span class="number">200</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> Convert.toInt(json.getByPath(<span class="string">&quot;content&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;add jobInfo error!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、创建新注解"><a href="#2、创建新注解" class="headerlink" title="2、创建新注解"></a>2、创建新注解</h4><p>在创建任务时，必填字段除了执行器和<code>jobHandler</code>之外，还有<strong>任务描述</strong>、<strong>负责人</strong>、<strong>Cron表达式</strong>、<strong>调度类型</strong>、<strong>运行模式</strong>。在这里，我们默认调度类型为<code>CRON</code>、运行模式为<code>BEAN</code>，另外的3个字段的信息需要用户指定。</p><p>因此我们需要创建一个新注解<code>@XxlRegister</code>，来配合原生的<code>@XxlJob</code>注解进行使用，填写这几个字段的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> XxlRegister &#123;</span><br><span class="line">    String <span class="title function_">cron</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">jobDesc</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;default jobDesc&quot;</span>;</span><br><span class="line">    String <span class="title function_">author</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;default Author&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">triggerStatus</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    String <span class="title function_">executorRouteStrategy</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;ROUND&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，额外添加了<code>triggerStatus</code>属性和<code>executorRouteStrategy</code> ，表示任务的默认调度状态，0为停止状态，1为运行状态和调度策略默认为轮询ROUND，FIRST为第一个。</p><h4 id="3、自动注册核心"><a href="#3、自动注册核心" class="headerlink" title="3、自动注册核心"></a>3、自动注册核心</h4><p>基本准备工作做完后，下面实现自动注册执行器和<code>jobHandler</code>的核心代码。核心类实现<code>ApplicationListener</code>接口，在接收到<code>ApplicationReadyEvent</code>事件后开始执行自动注册逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxlJobAutoRegister</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ApplicationReadyEvent&gt;, </span><br><span class="line">        ApplicationContextAware &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span>LogFactory.get();</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobGroupService jobGroupService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobInfoService jobInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext=applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationReadyEvent event)</span> &#123;</span><br><span class="line">        addJobGroup();<span class="comment">//注册执行器</span></span><br><span class="line">        addJobInfo();<span class="comment">//注册任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动注册执行器的代码非常简单，根据配置文件中的<code>appName</code>和<code>title</code>精确匹配查看调度中心是否已有执行器被注册过了，如果存在则跳过，不存在则新注册一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addJobGroup</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (jobGroupService.preciselyCheck())</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(jobGroupService.autoRegisterGroup())</span><br><span class="line">        log.info(<span class="string">&quot;auto register xxl-job group success!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动注册任务的逻辑则相对复杂一些，需要完成：</p><ul><li>通过<code>applicationContext</code>拿到spring容器中的所有bean，再拿到这些bean中所有添加了<code>@XxlJob</code>注解的方法</li><li>对上面获取到的方法进行检查，是否添加了我们自定义的<code>@XxlRegister</code>注解，如果没有则跳过，不进行自动注册</li><li>对同时添加了<code>@XxlJob</code>和<code>@XxlRegister</code>的方法，通过执行器id和<code>jobHandler</code>的值判断是否已经在调度中心注册过了，如果已存在则跳过</li><li>对于满足注解条件且没有注册过的<code>jobHandler</code>，调用接口注册到调度中心</li></ul><p>具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addJobInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;XxlJobGroup&gt; jobGroups = jobGroupService.getJobGroup();</span><br><span class="line">    <span class="type">XxlJobGroup</span> <span class="variable">xxlJobGroup</span> <span class="operator">=</span> jobGroups.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    String[] beanDefinitionNames = applicationContext.getBeanNamesForType(Object.class, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> applicationContext.getBean(beanDefinitionName);</span><br><span class="line"></span><br><span class="line">        Map&lt;Method, XxlJob&gt; annotatedMethods  = MethodIntrospector.selectMethods(bean.getClass(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">MethodIntrospector</span>.MetadataLookup&lt;XxlJob&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> XxlJob <span class="title function_">inspect</span><span class="params">(Method method)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> AnnotatedElementUtils.findMergedAnnotation(method, XxlJob.class);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Method, XxlJob&gt; methodXxlJobEntry : annotatedMethods.entrySet()) &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">executeMethod</span> <span class="operator">=</span> methodXxlJobEntry.getKey();</span><br><span class="line">            <span class="type">XxlJob</span> <span class="variable">xxlJob</span> <span class="operator">=</span> methodXxlJobEntry.getValue();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//自动注册</span></span><br><span class="line">            <span class="keyword">if</span> (executeMethod.isAnnotationPresent(XxlRegister.class)) &#123;</span><br><span class="line">                <span class="type">XxlRegister</span> <span class="variable">xxlRegister</span> <span class="operator">=</span> executeMethod.getAnnotation(XxlRegister.class);</span><br><span class="line">                List&lt;XxlJobInfo&gt; jobInfo = jobInfoService.getJobInfo(xxlJobGroup.getId(), xxlJob.value());</span><br><span class="line">                <span class="keyword">if</span> (!jobInfo.isEmpty())&#123;</span><br><span class="line">                    <span class="comment">//因为是模糊查询，需要再判断一次</span></span><br><span class="line">                    Optional&lt;XxlJobInfo&gt; first = jobInfo.stream()</span><br><span class="line">                            .filter(xxlJobInfo -&gt; xxlJobInfo.getExecutorHandler().equals(xxlJob.value()))</span><br><span class="line">                            .findFirst();</span><br><span class="line">                    <span class="keyword">if</span> (first.isPresent())</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">XxlJobInfo</span> <span class="variable">xxlJobInfo</span> <span class="operator">=</span> createXxlJobInfo(xxlJobGroup, xxlJob, xxlRegister);</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">jobInfoId</span> <span class="operator">=</span> jobInfoService.addJobInfo(xxlJobInfo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、自动装配"><a href="#4、自动装配" class="headerlink" title="4、自动装配"></a>4、自动装配</h4><p>创建一个配置类，用于扫描<code>bean</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.xxl.job.plus.executor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxlJobPlusConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将它添加到<code>META-INF/spring.factories</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.xxl.job.plus.executor.config.XxlJobPlusConfig</span><br></pre></td></tr></table></figure><p>到这里<code>starter</code>的编写就完成了，可以通过maven发布jar包到本地或者私服：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install/deploy</span><br></pre></td></tr></table></figure><h2 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h2><p>基于springboot项目，引入我们在上面打好的包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.hsyk&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;xxljob-autoregister-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在<code>application.yml</code>中配置xxl-job的信息，首先是原生的配置内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xxl:</span></span><br><span class="line">  <span class="attr">job:</span></span><br><span class="line">    <span class="attr">accessToken:</span> <span class="string">default_token</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">addresses:</span> <span class="string">http://192.168.129.36:30080/xxl-job-admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">executor:</span></span><br><span class="line">      <span class="attr">address:</span></span><br><span class="line">      <span class="attr">appname:</span> <span class="string">bright-sso-server</span></span><br><span class="line">      <span class="attr">ip:</span></span><br><span class="line">      <span class="attr">logpath:</span></span><br><span class="line">      <span class="attr">logretentiondays:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line">      <span class="comment">#执行器名称</span></span><br><span class="line">      <span class="attr">title:</span> <span class="string">sso-executor</span></span><br></pre></td></tr></table></figure><p>其中包含starter要求的新配置内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># admin用户名</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line"><span class="comment"># admin 密码</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment"># 执行器名称</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">sso-executor</span></span><br></pre></td></tr></table></figure><p>完成后在代码中配置一下<code>XxlJobSpringExecutor</code>，然后在测试接口上添加原生<code>@XxlJob</code>注解和我们自定义的<code>@XxlRegister</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XxlJob(&quot;demoJobHandler&quot;)</span></span><br><span class="line"><span class="meta">@XxlRegister(cron = &quot;0 0 0 * * ? *&quot;,author = &quot;fanxin&quot;,jobDesc = &quot;测试job&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demoJobHandler</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    XxlJobHelper.log(<span class="string">&quot;XXL-JOB, Hello World.&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        XxlJobHelper.log(<span class="string">&quot;beat at:&quot;</span> + i);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// default success</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，可以看到执行器自动注册成功</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231106155820182.png" alt="image-20231106155820182"></p><p>再打开调度中心的任务管理页面，可以看到同时添加了两个注解的任务也已经自动完成了注册</p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231106155847071.png" alt="image-20231106155847071"></p><p><img src="https://fx-blog-images.oss-cn-beijing.aliyuncs.com/java/image-20231106155903340.png" alt="image-20231106155903340"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/03/hello-world/"/>
      <url>/2023/11/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
